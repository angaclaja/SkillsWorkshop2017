import pandas as pd
import plotly
import plotly.plotly as py
from plotly.graph_objs import *
import plotly.tools as tls

#Requires plotly account and api key
#plotly.tools.set_credentials_file(username='username', api_key='password')

wine=pd.read_csv(
    filepath_or_buffer='~/Desktop/SummerPython/SkillsWorkshop2017/Week02/wine.data.txt', 
    header=None, 
    sep=',')
wine.dropna(how="all", inplace=True) # drops the empty line at file-end


wine.columns=['Cultivars', 'Alcohol', 'Malic acid', 'Ash', 'Alcalinity of ash', 'Magnesium', 'Total phenols', 'Flavanoids', 
              'Nonflavanoid phenols', 'Proanthocyanins', 'Color intensity', 'Hue', 'OD280/OD315 of diluted wines', 'Proline']

# split data table into data X and class labels y
X = wine.iloc[:,1:5].values
y = wine.iloc[:,0].values

#plotting histograms
 
histo=[]
legend={0:True, 1:False, 2:False, 3:False}

colors={1: 'rgb(31, 119, 180)', 
        1: 'rgb(255, 127, 14)', 
        3: 'rgb(44, 160, 44)'}

for col in range(4):
    for key in colors:
        histo.append(Histogram(x=X[y==key, col], 
                        opacity=0.5,
                        xaxis='x%s' %(col+1),
                        marker=Marker(color=colors[key]),
                        name=key,
                        showlegend=legend[col]))

data = Data(histo)

layout = Layout(barmode='overlay',
                xaxis=XAxis(domain=[0, 0.25], title='Alcohol'),
                xaxis2=XAxis(domain=[0.3, 0.5], title='Malic acid'),
                xaxis3=XAxis(domain=[0.55, 0.75], title='Ash'),
                xaxis4=XAxis(domain=[0.8, 1], title='Alcalinity of ash'),
                yaxis=YAxis(title='count'),
                title='Distribution of the different Iris flower features')

fig = Figure(data=data, layout=layout)
py.iplot(fig)

from sklearn.preprocessing import StandardScaler
X_std = StandardScaler().fit_transform(X)

import numpy as np
mean_vec = np.mean(X_std, axis=0)
cov_mat = (X_std - mean_vec).T.dot((X_std - mean_vec)) / (X_std.shape[0]-1)
print('Covariance matrix \n%s' %cov_mat)

cov_mat = np.cov(X_std.T)

eig_vals, eig_vecs = np.linalg.eig(cov_mat)

print('Eigenvectors \n%s' %eig_vecs)
print('\nEigenvalues \n%s' %eig_vals)

for ev in eig_vecs:
    np.testing.assert_array_almost_equal(1.0, np.linalg.norm(ev))
print('Everything ok!')

# Make a list of (eigenvalue, eigenvector) tuples
eig_pairs = [(np.abs(eig_vals[i]), eig_vecs[:,i]) for i in range(len(eig_vals))]

# Sort the (eigenvalue, eigenvector) tuples from high to low
eig_pairs.sort()
eig_pairs.reverse()

# Visually confirm that the list is correctly sorted by decreasing eigenvalues
print('Eigenvalues in descending order:')
for i in eig_pairs:
    print(i[0])
    
    
'''After sorting the eigenpairs, the next question is "how many principal components are we going to choose for our new 
feature subspace?" A useful measure is the so-called "explained variance," which can be calculated from the eigenvalues. 
The explained variance tells us how much information (variance) can be attributed to each of the principal components.'''

tot = sum(eig_vals)
var_exp = [(i / tot)*100 for i in sorted(eig_vals, reverse=True)]
cum_var_exp = np.cumsum(var_exp)

trace1 = Bar(
        x=['PC %s' %i for i in range(1,5)],
        y=var_exp,
        showlegend=False)

trace2 = Scatter(
        x=['PC %s' %i for i in range(1,5)], 
        y=cum_var_exp,
        name='cumulative explained variance')

data = Data([trace1, trace2])

layout=Layout(
        yaxis=YAxis(title='Explained variance in percent'),
        title='Explained variance by different principal components')

fig = Figure(data=data, layout=layout)
py.iplot(fig)

#projection matrix

matrix_w = np.hstack((eig_pairs[0][1].reshape(4,1), 
                      eig_pairs[1][1].reshape(4,1)))

print('Matrix W:\n', matrix_w)

'''In this last step we will use the 4×24×2-dimensional projection matrix WW to transform our samples onto the new subspace via the equation
Y=X×WY=X×W, where YY is a 150×2150×2 matrix of our transformed samples.'''

Y = X_std.dot(matrix_w)

traces = []

for name in (1, 2, 3):

    trace = Scatter(
        x=Y[y==name,0],
        y=Y[y==name,1],
        mode='markers',
        name=name,
        marker=Marker(
            size=12,
            line=Line(
                color='rgba(217, 217, 217, 0.14)',
                width=0.5),
            opacity=0.8))
    traces.append(trace)


data = Data(traces)
layout = Layout(showlegend=True,
                scene=Scene(xaxis=XAxis(title='PC1'),
                yaxis=YAxis(title='PC2'),))

fig = Figure(data=data, layout=layout)
py.iplot(fig)
